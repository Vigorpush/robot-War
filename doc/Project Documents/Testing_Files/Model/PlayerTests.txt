Player


        The Player class represents a User in the "Robot Arena" game.  It has methods to get or set the Robots it controls and to order those robots to move or attack. It also has methods to end the turn or to forfeit.  Many of the methods are getters and setters, and will be tested by simply using the approprate methods to set values and retrive them, comparing with the value originally entered.  Other methods, such as the attack and move methods, will be tested by creating an artificial board, and determining if the robot may move or attack the targeted space. The End Turn method would be observed in the controller’s tests. The forfeit method will be tested by observing if the board is properly cleared, and if the player became an observer,


setRobots(List<Robot>): void


Purpose:
        Tests that the method changes the Player’s robotList attribute to the passed in list.


Preconditions:
        The passed in list is not null


Postconditions:
        The Player’s robotList has been changed to the passed in list.


Error conditions:
        The Robot’s name could not be changed.


Pseudocode:
        Player red = new Player(George, Red)                
        red.setRobots(robots2)
            assertTrue(red.getRobots.equals(robots2))




getRobots(): List<Robot>


Purpose:
        Tests that the method outputs the Player’s robotList attribute 


Preconditions:
        The Player exists, and has a robotList


Postconditions:
        The Player’s robotList has been outputted.


Error conditions:
        The Player’s robotList was not outputted.


Pseudocode:
            assertTrue(red.getRobots.equals(robots1))


moveRobot(Robot, Tile): Boolean


Purpose:
        Tests that the method checks that the Robot can move to the specified location, and then changes the Robot’s location to the correct location


Preconditions:
        The passed in Robot and Tile are not null


Postconditions:
        The Robot is either moved or could not be moved.


Error conditions:
                The Robot moved to the wrong space
         The Robot moved when it did not have enough movement left
The Robot did not move when it had enough movement


Pseudocode:
        int movesLeft = robot1.getMovesLeft()
        assertTrue(movesLeft > 0)
        Tile start = robot1.getTile()
        assertTrue(Board.movePossible(start, end))
        red.moveRobot(robot1,end)
        assertTrue(red.getTile().equals(end))
        int x = end.getX();
        int y = end.getY();
        assertTrue(Board.board[x][y].getRobot(robot1).equals(robot1))
        assertTrue((movesLeft-1)==robot1.getMovesLeft())


attack(Robot, Tile): Boolean


Purpose:
        Tests that the method checks that the Robot can attack the specified location, and then changes the health of all robots at that location


Preconditions:
        The passed in Robot and Tile are not null


Postconditions:
        The Robot has either attacked the specified tile or has not attacked


Error conditions:
                The Robot attacks the wrong space
         The Player attacked when they could not attack
The Robot at the target tile took to much damage


Pseudocode:        
        assertTrue(red.hasShot == false)
        Tile start = robot1.getTile()
        assertTrue(Board.attackPossible(start, end))
        RobotList before = end.robotList;
red.attack(robot1,end)
int robotAttack = robot1.getDamage()
        int j = 0
        for(int i ; i< before.length i++)
                if(before[i].getHealth() - robotAttack > 0)
                        assertTrue(end.robotList[j].getHealth() == before[i].getHealth() -    robotAttack)
                        j++
        assertTrue(red.hasShot == true)




Forfeit(): void


Purpose:
        Tests that the method removes all the Players Robots from the board and creates an observer with the same name as the player


Preconditions:
        None


Postconditions:
        The Player’s Robots are no longer on the board
        The Player is now an observer


Error conditions:
        The Robot’s were not removed
        The Player is not an observer


Pseudocode:
        RobotList oldRobots = red.getRobots()
        red.forfeit()
        for(int i = 0; i < oldRobots.length ; i++)
                assertTrue(oldRobots[i].getTile().getRobot(oldRobots[i]) == Null)
        assertTrue( red instanceof Observer)