Description:

	The game class acts as the controller for our system.  It is responsible for communicating with 
the model and view to ensure the system runs smoothly.  The game contains functions that are called by 
the view when a user interacts with it, and functions that are called to communicate with the 
model to get updates on the game state.  The game class will handle communications with the RobotLibrarian
and the Server, to get the external info it needs to begin the game.  After a game has started, the game
class will continually run to move the game forward.

Significance:

	The game class is the point in the system that all commands and data pass through, and thus it
is crucial to thouroughly test this module.  This class will run the main program, and coordinate all
game data.  It is important that the game can effectively communicate with both the view and the model
to ensure all modules recieve the information they need to progress the program.  

Testing Plan:

	We will create a J-unit test module for the controller class that will contain methods for testing
the functions in the game class as described below.

	
	gameInit:	The gameInit() function will initialize all players and their robots. This function will be tested by calling it with a number of players
			and testing to see if the players were propery initialized.  A few different, but non-exhaustive tests will be sufficient.  We will initialize
			a game with two human players and check to see that we have a list of two players with all of their robots initialized.  Then a game with three
			AI players will be initialized and checked in the same way.  Finally, a game with 6 players, 3 human and 3 AI will be initialized and checked.

			Pseudocode:
				create 2 fake human players
				gameInit()
				assert(2_players_in_player_list)
				assert(each_player_has_a_colour)
				assert(each_player_has_three_robots)
		
				create 3 fake AI players
				gameInit()
				assert(3_players_in_player_list)
				assert(each_player_has_a_colour)
				assert(each_player_has_three_robots)

				create 3 fake human players
				create 3 fake AI players
				gameInit()
				assert(6_players_in_player_list)
				assert(each_player_has_a_colour)
				assert(each_player_has_three_robots)


	joinGame:	The joinGame function is called by the StartView.  It will specify a host to connect to, and will call the connectToHost() function in the
			server.  This will be tested by creating a fake host to connect to, and calling the join game with that host.  The parameters will be checked
			for correctness.

			Pseudocode:
				create a fake host
				joinGame(fake_host)
				server.connectToHost(fake_host)
				assert(user_is_connected_to_host)

	
	hostGame:


	exitGame:	The exitGame() function is called by the StartView.  It will terminate the program.  This will not be tested AND THIS FUNCTION SHOULD 
			PROBABLY BE REMOVED FROM THIS DOCUMENT FOR THIS REASON

	
	lobbyBack:	The lobbyBack() funtion is called by the LobbyView.  It will take the user back to the StartView and properly disconnect the user from the 
			host.  If the user who selected the back option is the host of the game, the match is terminated and all players are kicked.  This will be
			tested by connecting the user to a fake host, and calling the appropriate server functions to terminate the connection.

			Pseudocode:
				server.connect(fake_host)
				lobbyBack()
				assert(user_is_not_connected)

				server.host(me)
				lobbyBack()
				assert(match_does_not_exist)

	
	switch:


	kick:

	
	beginGame:


	gameBack:

	
	tileClicked:

	endTurn:

	changeScreen:

	initView:

	inputDetector:

	checkWinLose:

	getTileInfo:

	updateRobotPrograms:

	archiveRobotPrograms:

	processAi:

	connectToServer:

	checkServerStatus:

	sendGameStateToServer:



	

