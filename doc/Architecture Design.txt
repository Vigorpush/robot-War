
Networking is not our priority in this project 
	Reason is the server we will use which need be setted by prof
	But the last term, prof is not doing this, therefore, all the group just never do the networking stuff

	
Database is not required
	Reason is this data this game is small scale, which is mean that creating database will lose our energy 
	
	
Therefore, MVC should be the most reasonable architecture is this game software


	VIEW:
		Interface which recive the user input and show the output from the game inner system. AKA this layer will also draw the map.
	
	CONTROL: 
		Logic layer which will handle the all the math and logic.
	
	MODEL:
		ALL the entities which we have, lib files, supportting files, save data, elements information are storing in here, and can let the CONTROL part have access to those.
		
	
And pro and con about the MVC

	Pros
	1. Keeping the user interface changes completely separate from business logic. 
	 
	2. helps in easier maintenance of code.
		Business logic so code is clean and easy to maintenance

	3. Easier to test the business components, user interface 
	 
	4. More testable
 
 
 
 CONs
	1. More work which is mean that complex design
		Which needs good understand of control flows
 
 "The pattern isolates “domain logic” (the application logic for the user) from the user interface (input and presentation), permitting independent development, testing and maintenance of each (separation of concerns)."--This is from online material
 
 

	